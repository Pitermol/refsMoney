import logging
import time

import requests
from aiogram import Bot, Dispatcher, executor, types
# from telethon import TelegramClient
# from telethon import functions
import nest_asyncio
# import emoji
import json
import datetime
from pyqiwip2p import QiwiP2P

# data = {}

myp = 'ead5390e4cd10728b73bc60c5c712075'
my = "e71b4a2d045899fac91649d6ca1ebe1e"
qiwi_api = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6IjU0dWExdS0wMCIsInVzZXJfaWQiOiI3OTE4NDYxMDYyNSIsInNlY3JldCI6ImQ0OGVmOTEwMDRhOTVjYzViOWNmODZhYWJiMjQ1ODk2OTY5NDU0OGNhMmE4NWY1ZGM1YTdkMDlmZmE5YmYwYmMifX0="
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = Bot(token="5389976468:AAGArO3pjoHVkyHNOwWk1kdCK8B8vJdsStU")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
# api_id = 14834490
# api_hash = "b392250f1c7031238f11620f75f6707b"
p2p = QiwiP2P(
    auth_key=qiwi_api)
result = None
nest_asyncio.apply()
waiting = None
dep1 = None
dep2 = None


def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    return text.split()[1] if len(text.split()) > 1 else None


@dp.message_handler(commands=["start", "menu"], state="*")
async def introduction(message: types.Message):
    unique_code = extract_unique_code(message.text)
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    if unique_code:
        data[str(unique_code)][3] += 1
        await bot.send_message(int(unique_code), "‚ùï–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç –≤–∞—Å –æ—Ç—Å—Ç–∞–≤–∞—Ç—å‚ùï\n‚ùï–î–ª—è "
                                                 "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ–º—É —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å‚ùï")
    if str(message.chat.id) not in data:
        print(1)
        if unique_code:
            data[str(message.chat.id)] = [0, 0, [], 0, "", str(unique_code)]
        else:
            data[str(message.chat.id)] = [0, 0, [], 0, "", None]
    cur_time = datetime.datetime.today().hour
    if 0 <= cur_time <= 5:
        cur_time = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, "
    elif 6 <= cur_time <= 12:
        cur_time = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, "
    elif 13 <= cur_time <= 17:
        cur_time = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, "
    else:
        cur_time = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, "
    user = str(message.chat.username)
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_1 = InlineKeyboardButton('–ü—Ä–æ–≥—Ä–µ—Å—Å üí•', callback_data='progress')
    inline_btn_2 = InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å üè¢', callback_data='profile')
    inline_kb_full.row(inline_btn_1, inline_btn_2)
    inline_btn_3 = InlineKeyboardButton('–°–ø—Ä–∞–≤–∫–∞ ‚Åâ', callback_data='ask')
    inline_btn_4 = InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Ñπ', url="t.me/R460BL")
    inline_kb_full.row(inline_btn_3, inline_btn_4)
    # inline_btn_5 = InlineKeyboardButton('–ù–∞—à —á–∞—Ç üë´', callback_data='chat')
    # inline_kb_full.row(inline_btn_5)
    inline_btn_6 = InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π üìÆ', url="t.me/ref_to_cash_bot?start=" +
                                                                    str(message.chat.id))
    inline_kb_full.row(inline_btn_6)
    print(user)
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()
    try:
        await message.answer(cur_time + user + "!\n\n–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å _–ª–µ–≥–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å_ –∑–∞ *–ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*üî•"
                                               "\n\n–ü–æ–≤—ã—à–∞—è —É—Ä–æ–≤–µ–Ω—å, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ üí∏",
                             parse_mode="Markdown", reply_markup=inline_kb_full)
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda c: c.data == 'progress')
async def process_callback_button6(callback_query: types.CallbackQuery):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    new_text = "{–£—Ä–æ–≤–µ–Ω—å " + str(data[str(callback_query.message.chat.id)][0]) + \
               "}\n\n–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ:\n+2 —Ä –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n–ü–æ–ª—É—á–∏ " + \
               str(data[str(callback_query.message.chat.id)][0] + 1) + " —É—Ä–æ–≤–µ–Ω—å," \
                                                                       " —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n+30 —Ä –∑–∞ " \
                                                                       "–∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n–∏–ª–∏\n\n–ü–æ–ª—É—á–∏ —Å—Ä–∞–∑—É " + \
               str(data[str(callback_query.message.chat.id)][
                       0] + 2) + "—É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n+50 —Ä –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_7 = InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å üî•', callback_data='upgrade')
    inline_kb_full.row(inline_btn_7)
    inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
    inline_kb_full.row(inline_btn_8)
    await callback_query.message.edit_text(new_text, reply_markup=inline_kb_full)
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.callback_query_handler(lambda c: c.data == 'upgrade')
async def process_callback_button5(callback_query: types.CallbackQuery):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    global dep1, dep2
    if data[str(callback_query.message.chat.id)][0] == 0:
        bill = p2p.bill(amount=99, lifetime=10, comment="–ü–æ–ª—É—á–µ–Ω–∏–µ 1 —É—Ä–æ–≤–Ω—è")  # –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        bill1 = p2p.bill(amount=199, lifetime=10, comment="–ü–æ–ª—É—á–µ–Ω–∏–µ 2 —É—Ä–æ–≤–Ω—è")  # –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        dep1 = bill.bill_id
        dep2 = bill1.bill_id
        new_text = f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 1 —É—Ä–æ–≤–µ–Ω—å, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 99 —Ä—É–±–ª–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Å—ã–ª–∫—É: {bill.pay_url}\n\n" \
                   f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–∑—É 2 —É—Ä–æ–≤–µ–Ω—å, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 199 —Ä—É–±–ª–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Å—ã–ª–∫—É: {bill1.pay_url}"
    else:
        bill = p2p.bill(amount=199, lifetime=10, comment="–ü–æ–ª—É—á–µ–Ω–∏–µ 2 —É—Ä–æ–≤–Ω—è")  # –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        dep2 = bill.bill_id
        new_text = f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 2 —É—Ä–æ–≤–µ–Ω—å, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 199 —Ä—É–±–ª–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Å—ã–ª–∫—É: {bill.pay_url}\n\n"

    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_15 = InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚òë', callback_data='check_dep')
    inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
    inline_kb_full.row(inline_btn_15)
    inline_kb_full.row(inline_btn_8)
    await callback_query.message.edit_text(new_text, reply_markup=inline_kb_full)
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.callback_query_handler(lambda c: c.data == 'check_dep')
async def process_callback_button5(callback_query: types.CallbackQuery):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    global dep1, dep2
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_15 = InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚òë', callback_data='check_dep')
    inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
    inline_kb_full.row(inline_btn_15)
    inline_kb_full.row(inline_btn_8)
    if dep1 is not None:
        if p2p.check(bill_id=str(dep1)).status == "PAID":  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É
            await bot.send_message(callback_query.message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å 1 —É—Ä–æ–≤–µ–Ω—å üéâ")
            data[callback_query.message.chat.id][0] = 1
            dep1 = None
            if data[callback_query.message.chat.id][5] is not None:
                ref = data[callback_query.message.chat.id][5]
                data[ref][3] -= 1
                data[ref][2].append(callback_query.message.chat.id)
                if data[ref][0] == 0:
                    data[ref][1] += 2
                elif data[ref][0] == 1:
                    data[ref][1] += 30
                else:
                    data[ref][1] += 50
                await bot.send_message(ref, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª,–±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω! üéâ")
        else:
            await bot.send_message(callback_query.message.chat.id, "–û–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ ‚ùå")

    elif dep2 is not None:
        if p2p.check(bill_id=str(dep2)).status == "PAID":  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É
            await bot.send_message(callback_query.message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å 2 —É—Ä–æ–≤–µ–Ω—å üéâ")
            data[callback_query.message.chat.id][0] = 2
            dep2 = None
        else:
            await bot.send_message(callback_query.message.chat.id, "–û–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ ‚ùå")
    else:
        await bot.send_message(callback_query.message.chat.id, "–î–ª—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ–≥—Ä–µ—Å—Å")
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.callback_query_handler(lambda c: c.data == 'profile')
async def process_callback_button4(callback_query: types.CallbackQuery):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    # refref = 0
    # for i in data[callback_query.message.chat.id][2]:
    #     if i in data:
    #         refref += len(data[i][2])
    new_text = str(data[str(callback_query.message.chat.id)][0] + 1) \
               + " –£–†–û–í–ï–ù–¨\n\n–ë–∞–ª–∞–Ω—Å: " + str(data[str(callback_query.message.chat.id)][1]) + \
               " —Ä—É–±\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã: " + str(len(data[str(callback_query.message.chat.id)][2])) \
               + " —á–µ–ª–æ–≤–µ–∫\n–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + str(data[str(callback_query.message.chat.id)][3]) + \
               " —á–µ–ª–æ–≤–µ–∫\n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!\n\nüì£ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: " \
               "t.me/ref_to_cash_bot?start=" + str(callback_query.message.chat.id) + \
               "\n\nüì¢ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–Ω–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞:\nhttps://teleg.run/ref_to_cash_bot?start=" \
               + str(callback_query.message.chat.id)
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_9 = InlineKeyboardButton('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ üí∞', callback_data='withdraw')
    inline_kb_full.row(inline_btn_9)
    inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
    inline_kb_full.row(inline_btn_8)
    await callback_query.message.edit_text(new_text, reply_markup=inline_kb_full)
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.callback_query_handler(lambda c: c.data == 'ask')
async def process_callback_button3(callback_query: types.CallbackQuery):
    new_text = "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n1. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ª—é–±–æ–≥–æ –≤–∏–¥–∞ –Ω–∞–∫—Ä—É—Ç–∫–∞, –±—É–∫—Å—ã, –∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö" \
               " –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n2. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –æ–±—â–∞—Ç—å—Å—è –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ." \
               "\n\n3. –í —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω –º–∞—Ç, —Ñ–ª—É–¥ –∏ –æ–±–º–µ–Ω —Å—Å—ã–ª–∫–∞–º–∏.\n\n4. –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏: –†–§, –£–∫—Ä–∞–∏–Ω–∞, " \
               "–ë–µ–ª–∞—Ä—É—Å—å.\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –æ " \
               "–Ω–∞–∫—Ä—É—Ç–∫–µ –∏ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏."
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    # inline_btn_10 = InlineKeyboardButton('–ß–∞—Ç', url="t.me/R460BL")
    inline_btn_11 = InlineKeyboardButton('–ê–¥–º–∏–Ω ‚ùì', url="t.me/R460BL")
    inline_kb_full.row(inline_btn_11)
    inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
    inline_kb_full.row(inline_btn_8)
    await callback_query.message.edit_text(new_text, reply_markup=inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def process_callback_button2(callback_query: types.CallbackQuery):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    global waiting
    if data[str(callback_query.message.chat.id)][4] == "":
        inline_kb_full = InlineKeyboardMarkup(row_width=2)
        inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
        inline_kb_full.row(inline_btn_8)
        waiting = callback_query
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—á—ë—Ç Qiwi: ", reply_markup=inline_kb_full)
    else:
        new_text = "–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ QIWI: " + str(data[str(callback_query.message.chat.id)][4]) + \
                   "\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ –∞–¥—Ä–µ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)."
        inline_kb_full = InlineKeyboardMarkup(row_width=2)
        inline_btn_12 = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üè∑', callback_data='change')
        inline_btn_13 = InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ üì©', callback_data='go')
        inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
        inline_kb_full.row(inline_btn_12)
        inline_kb_full.row(inline_btn_13)
        inline_kb_full.row(inline_btn_8)
        await callback_query.message.edit_text(new_text, reply_markup=inline_kb_full)
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.message_handler()
async def changing(message: types.Message):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    global waiting
    if waiting:
        if len(message.text) < 3:
            inline_kb_full = InlineKeyboardMarkup(row_width=2)
            inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
            inline_kb_full.row(inline_btn_8)
            await waiting.message.edit_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥! üîÅ",
                                            reply_markup=inline_kb_full)
        else:
            data[str(message.chat.id)][4] = message.text
            inline_kb_full = InlineKeyboardMarkup(row_width=2)
            inline_btn_12 = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üè∑', callback_data='change')
            inline_btn_13 = InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ üì©', callback_data='go')
            inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
            inline_kb_full.row(inline_btn_12)
            inline_kb_full.row(inline_btn_13)
            inline_kb_full.row(inline_btn_8)
            new_text = "–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ QIWI: " + str(data[str(waiting.message.chat.id)][4]) + \
                       "\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ –∞–¥—Ä–µ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞) üíØ"
            await waiting.message.edit_text(new_text, reply_markup=inline_kb_full)
            waiting = None
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.callback_query_handler(lambda c: c.data == 'change')
async def process_callback_button2(callback_query: types.CallbackQuery):
    global waiting
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
    inline_kb_full.row(inline_btn_8)
    waiting = callback_query
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—á—ë—Ç Qiwi: ", reply_markup=inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'go')
async def process_callback_button2(callback_query: types.CallbackQuery):
    with open("data.json", "r") as f:
        data = json.load(f)
    f.close()
    global qiwi_api, my
    if data[str(callback_query.message.chat.id)][1] < 10:
        inline_kb_full = InlineKeyboardMarkup(row_width=2)
        inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
        inline_kb_full.row(inline_btn_8)
        await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É! üõë", reply_markup=inline_kb_full)
    else:
        n = str(data[str(callback_query.message.chat.id)][4])
        s = requests.Session()
        s.headers = {'content-type': 'application/json', 'authorization': 'Bearer ' + my, 'Accept': 'application/json'}
        postjson = {"sum": {"amount": int(data[str(callback_query.message.chat.id)][1]), "currency": "643"},
                    "paymentMethod": {"type": "Account", "accountId": "643"}, "comment": "",
                    "fields": {"account": n}, 'id': str(int(time.time() * 1000))}
        res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/99/payments', json=postjson)
        print(res)
        if str(res.status_code) != "200":
            inline_kb_full = InlineKeyboardMarkup(row_width=2)
            inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
            inline_kb_full.row(inline_btn_8)
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=inline_kb_full)
        else:
            data[str(callback_query.message.chat.id)][1] = 0
            inline_kb_full = InlineKeyboardMarkup(row_width=2)
            inline_btn_8 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='menu')
            inline_kb_full.row(inline_btn_8)
            await callback_query.message.edit_text("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–∏—Ç–µ) üîú", reply_markup=inline_kb_full)
    with open("data.json", "w") as f:
        json.dump(data, f)
    f.close()


@dp.callback_query_handler(lambda c: c.data == 'menu')
async def process_callback_button7(callback_query: types.CallbackQuery):
    cur_time = datetime.datetime.today().hour
    if 0 <= cur_time <= 5:
        cur_time = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, "
    elif 6 <= cur_time <= 12:
        cur_time = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, "
    elif 13 <= cur_time <= 17:
        cur_time = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, "
    else:
        cur_time = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, "
    user = str(callback_query.message.chat.username)
    inline_kb_full = InlineKeyboardMarkup(row_width=2)
    inline_btn_1 = InlineKeyboardButton('–ü—Ä–æ–≥—Ä–µ—Å—Å üí•', callback_data='progress')
    inline_btn_2 = InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å üè¢', callback_data='profile')
    inline_kb_full.row(inline_btn_1, inline_btn_2)
    inline_btn_3 = InlineKeyboardButton('–°–ø—Ä–∞–≤–∫–∞ ‚Åâ', callback_data='ask')
    inline_btn_4 = InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Ñπ', url="t.me/R460BL")
    inline_kb_full.row(inline_btn_3, inline_btn_4)
    # inline_btn_5 = InlineKeyboardButton('–ù–∞—à —á–∞—Ç üë´', callback_data='chat')
    # inline_kb_full.row(inline_btn_5)
    inline_btn_6 = InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π üìÆ', url="t.me/ref_to_cash_bot?start=" +
                                                                    str(callback_query.message.chat.id))
    inline_kb_full.row(inline_btn_6)
    print(user)
    try:
        await callback_query.message.edit_text(
            cur_time + user + "!\n\n–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å _–ª–µ–≥–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å_ –∑–∞ *–ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*üî•"
                              "\n\n–ü–æ–≤—ã—à–∞—è —É—Ä–æ–≤–µ–Ω—å, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ üí∏",
            parse_mode="Markdown", reply_markup=inline_kb_full)
    except Exception as e:
        print(e)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
